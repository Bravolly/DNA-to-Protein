
import dnaproject.DNAProject.DNA;
import static dnaproject.DNAProject.compliDNA;
import static dnaproject.DNAProject.createCodonString;
import static dnaproject.DNAProject.reverseDNA;
import static dnaproject.DNAProject.translateCodons;
import java.awt.TextArea;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

public class Guiproject extends javax.swing.JFrame {

  /**
   * Creates new form Guiproject
   */
  public Guiproject() {
    initComponents();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jLabel1 = new javax.swing.JLabel();
    DNAEntryField = new javax.swing.JTextField();
    ComplimentaryCB = new javax.swing.JCheckBox();
    jLabel2 = new javax.swing.JLabel();
    AminoAcidCB = new javax.swing.JCheckBox();
    RvsDNACB = new javax.swing.JCheckBox();
    jButton1 = new javax.swing.JButton();
    DisplayTextArea = new java.awt.TextArea("", 0, 0, TextArea.SCROLLBARS_VERTICAL_ONLY);
    RvsAminoCB = new javax.swing.JCheckBox();
    CompliAminoCB = new javax.swing.JCheckBox();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("DNA to Protein");
    setMaximumSize(new java.awt.Dimension(492, 422));
    setMinimumSize(new java.awt.Dimension(492, 422));
    setResizable(false);

    jLabel1.setText("Input your DNA sequence:");

    DNAEntryField.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        DNAEntryFieldActionPerformed(evt);
      }
    });

    ComplimentaryCB.setText("Complimentary DNA Sequence");
    ComplimentaryCB.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        ComplimentaryCBActionPerformed(evt);
      }
    });

    jLabel2.setText("What would you like the DNA sequence to be translated to?");

    AminoAcidCB.setText("Amino Acid Sequence");
    AminoAcidCB.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        AminoAcidCBActionPerformed(evt);
      }
    });

    RvsDNACB.setText("Reverse DNA Sequence");
    RvsDNACB.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        RvsDNACBActionPerformed(evt);
      }
    });

    jButton1.setText("Translate");
    jButton1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton1ActionPerformed(evt);
      }
    });

    DisplayTextArea.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
    DisplayTextArea.setEditable(false);
    DisplayTextArea.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N

    RvsAminoCB.setText("Reversed DNA Amino Acid Sequence");
    RvsAminoCB.setEnabled(false);

    CompliAminoCB.setText("Complimentary DNA Amino Acid Sequence");
    CompliAminoCB.setEnabled(false);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGap(31, 31, 31)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addComponent(jButton1)
          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jLabel1)
              .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(ComplimentaryCB)
                  .addComponent(AminoAcidCB)
                  .addComponent(RvsDNACB)))
              .addComponent(jLabel2)
              .addGroup(layout.createSequentialGroup()
                .addGap(205, 205, 205)
                .addComponent(RvsAminoCB))
              .addGroup(layout.createSequentialGroup()
                .addGap(205, 205, 205)
                .addComponent(CompliAminoCB)))
            .addComponent(DisplayTextArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(DNAEntryField)))
        .addContainerGap(31, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGap(28, 28, 28)
        .addComponent(jLabel1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(DNAEntryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(10, 10, 10)
        .addComponent(jLabel2)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(AminoAcidCB)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(RvsDNACB)
          .addComponent(RvsAminoCB))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(ComplimentaryCB)
          .addComponent(CompliAminoCB))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(DisplayTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jButton1)
        .addContainerGap(28, Short.MAX_VALUE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void DNAEntryFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DNAEntryFieldActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_DNAEntryFieldActionPerformed

  private void AminoAcidCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AminoAcidCBActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_AminoAcidCBActionPerformed

  private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    DNA myDNASequence = new DNA();
    
    myDNASequence.dnaStr = DNAEntryField.getText();
    
    myDNASequence.dnaStr = myDNASequence.dnaStr.toUpperCase();
    
    myDNASequence.codonStr = createCodonString(myDNASequence.dnaStr);
    myDNASequence.aminoAcidSqn = translateCodons(myDNASequence.codonStr);
    myDNASequence.dnaRvs = reverseDNA(myDNASequence.dnaStr);
    myDNASequence.compli = compliDNA(myDNASequence.dnaStr);
    
    //Amino box checked
    if (AminoAcidCB.isSelected()) {
      DisplayTextArea.setText("  DNA's Amino Acid sequence:\n\n"
                              + myDNASequence.aminoAcidSqn + "\n\n\n");
    }
    
    //Reverse box checked
    if (RvsDNACB.isSelected()) {
      DisplayTextArea.setText("  Reversed DNA sequence:\n\n"
                              + myDNASequence.dnaRvs + "\n\n\n");
      
      if (RvsAminoCB.isSelected()) {
        myDNASequence.codonStr = createCodonString(myDNASequence.dnaRvs);
        myDNASequence.rvsAminoSqn = translateCodons(myDNASequence.codonStr);
        
        DisplayTextArea.setText("  Reversed DNA sequence:\n\n"
                                + myDNASequence.dnaRvs + "\n\n\n"
                                + "  Reversed Amino Acid sequence:\n\n"
                                + myDNASequence.rvsAminoSqn + "\n\n\n");
      }
    }
    
    //Complimentary box checked
    if (ComplimentaryCB.isSelected()) {
      DisplayTextArea.setText("  Complimentary DNA sequence:\n\n"
                              + myDNASequence.compli + "\n\n\n");
      
      if (CompliAminoCB.isSelected()) {
        myDNASequence.codonStr = createCodonString(myDNASequence.compli);
        myDNASequence.compliAminoSqn = translateCodons(myDNASequence.codonStr);
        
        DisplayTextArea.setText("  Complimentary DNA sequence:\n\n"
                                + myDNASequence.compli + "\n\n\n"
                                + "  Complimentary Amino Acid sequence:\n\n"
                                + myDNASequence.compliAminoSqn + "\n\n\n");
      }
    }
    
    //Amino and Reverse box checked
    if (AminoAcidCB.isSelected() && RvsDNACB.isSelected()) {
      DisplayTextArea.setText("  DNA's Amino Acid sequence:\n\n"
                              + myDNASequence.aminoAcidSqn + "\n\n\n"
                              + "  Reversed DNA sequence:\n\n"
                              + myDNASequence.dnaRvs + "\n\n\n");
      
      
      
      if (RvsAminoCB.isSelected()) {
        myDNASequence.codonStr = createCodonString(myDNASequence.dnaRvs);
        myDNASequence.rvsAminoSqn = translateCodons(myDNASequence.codonStr);
        
        DisplayTextArea.setText("  DNA's Amino Acid sequence:\n\n"
                                + myDNASequence.aminoAcidSqn + "\n\n\n"
                                + "  Reversed DNA sequence:\n\n"
                                + myDNASequence.dnaRvs + "\n\n\n"
                                + "  Reversed Amino Acid sequence:\n\n"
                                + myDNASequence.rvsAminoSqn + "\n\n\n");
      }
    }
    
    //Amino and Complimentary box checked
    if (AminoAcidCB.isSelected() && ComplimentaryCB.isSelected()) {
      DisplayTextArea.setText("  DNA's Amino Acid sequence:\n\n"
                              + myDNASequence.aminoAcidSqn + "\n\n\n"
                              + "  Complimentary DNA sequence:\n\n"
                              + myDNASequence.compli + "\n\n\n");
      
      
      
      if (CompliAminoCB.isSelected()) {
        myDNASequence.codonStr = createCodonString(myDNASequence.compli);
        myDNASequence.compliAminoSqn = translateCodons(myDNASequence.codonStr);
        
        DisplayTextArea.setText("  DNA's Amino Acid sequence:\n\n"
                                + myDNASequence.aminoAcidSqn + "\n\n\n"
                                + "  Complimentary DNA sequence:\n\n"
                                + myDNASequence.compli + "\n\n\n"
                                + "  Complimentary Amino Acid sequence:\n\n"
                                + myDNASequence.compliAminoSqn + "\n\n\n");
      }
    }
    
    //Reverse and Complimentary box checked
    if (RvsDNACB.isSelected() && ComplimentaryCB.isSelected()) {
      DisplayTextArea.setText("  Reversed DNA sequence:\n\n"
                              + myDNASequence.dnaRvs + "\n\n\n"
                              + "  Complimentary DNA sequence:\n\n"
                              + myDNASequence.compli + "\n\n\n");
      
      if (RvsAminoCB.isSelected()) {
        myDNASequence.codonStr = createCodonString(myDNASequence.dnaRvs);
        myDNASequence.rvsAminoSqn = translateCodons(myDNASequence.codonStr);
        
        DisplayTextArea.setText("  Reversed DNA sequence:\n\n"
                                + myDNASequence.dnaRvs + "\n\n\n"
                                + "  Reversed Amino Acid sequence:\n\n"
                                + myDNASequence.rvsAminoSqn + "\n\n\n"
                                + "  Complimentary DNA sequence:\n\n"
                                + myDNASequence.compli + "\n\n\n");
      }
      
      if (CompliAminoCB.isSelected()) {
        myDNASequence.codonStr = createCodonString(myDNASequence.compli);
        myDNASequence.compliAminoSqn = translateCodons(myDNASequence.codonStr);
        
        DisplayTextArea.setText("  Reversed DNA sequence:\n\n"
                                + myDNASequence.dnaRvs + "\n\n\n"
                                + "  Complimentary DNA sequence:\n\n"
                                + myDNASequence.compli + "\n\n\n"
                                + "  Complimentary Amino Acid sequence:\n\n"
                                + myDNASequence.compliAminoSqn + "\n\n\n");
      }
      
      if (RvsAminoCB.isSelected() && CompliAminoCB.isSelected()) {
        myDNASequence.codonStr = createCodonString(myDNASequence.dnaRvs);
        myDNASequence.rvsAminoSqn = translateCodons(myDNASequence.codonStr);
        
        myDNASequence.codonStr = createCodonString(myDNASequence.compli);
        myDNASequence.compliAminoSqn = translateCodons(myDNASequence.codonStr);
        
        DisplayTextArea.setText("  Reversed DNA sequence:\n\n"
                                + myDNASequence.dnaRvs + "\n\n\n"
                                + "  Reversed Amino Acid sequence:\n\n"
                                + myDNASequence.rvsAminoSqn + "\n\n\n"
                                + "  Complimentary DNA sequence:\n\n"
                                + myDNASequence.compli + "\n\n\n"
                                + "  Complimentary Amino Acid sequence:\n\n"
                                + myDNASequence.compliAminoSqn + "\n\n\n");
      }
    }
    
    //Amino, Reverse and Complimentary box checked
    if (AminoAcidCB.isSelected() && RvsDNACB.isSelected()
        && ComplimentaryCB.isSelected()) {
      DisplayTextArea.setText("  DNA's Amino Acid sequence:\n\n"
                              + myDNASequence.aminoAcidSqn + "\n\n\n"
                              + "  Reversed DNA sequence:\n\n"
                              + myDNASequence.dnaRvs + "\n\n\n"
                              + "  Complimentary DNA sequence:\n\n"
                              + myDNASequence.compli + "\n\n\n");
      
      if (RvsAminoCB.isSelected()) {
        myDNASequence.codonStr = createCodonString(myDNASequence.dnaRvs);
        myDNASequence.rvsAminoSqn = translateCodons(myDNASequence.codonStr);
        
        DisplayTextArea.setText("  DNA's Amino Acid sequence:\n\n"
                                + myDNASequence.aminoAcidSqn + "\n\n\n"
                                + "  Reversed DNA sequence:\n\n"
                                + myDNASequence.dnaRvs + "\n\n\n"
                                + "  Reversed Amino Acid sequence:\n\n"
                                + myDNASequence.rvsAminoSqn + "\n\n\n"
                                + "  Complimentary DNA sequence:\n\n"
                                + myDNASequence.compli + "\n\n\n");
      }
      
      if (CompliAminoCB.isSelected()) {
        myDNASequence.codonStr = createCodonString(myDNASequence.compli);
        myDNASequence.compliAminoSqn = translateCodons(myDNASequence.codonStr);
        
        DisplayTextArea.setText("  DNA's Amino Acid sequence:\n\n"
                                + myDNASequence.aminoAcidSqn + "\n\n\n"
                                + "  Reversed DNA sequence:\n\n"
                                + myDNASequence.dnaRvs + "\n\n\n"
                                + "  Complimentary DNA sequence:\n\n"
                                + myDNASequence.compli + "\n\n\n"
                                + "  Complimentary Amino Acid sequence:\n\n"
                                + myDNASequence.compliAminoSqn + "\n\n\n");
      }
      
      if (RvsAminoCB.isSelected() && CompliAminoCB.isSelected()) {
        myDNASequence.codonStr = createCodonString(myDNASequence.dnaRvs);
        myDNASequence.rvsAminoSqn = translateCodons(myDNASequence.codonStr);
        
        myDNASequence.codonStr = createCodonString(myDNASequence.compli);
        myDNASequence.compliAminoSqn = translateCodons(myDNASequence.codonStr);
        
        DisplayTextArea.setText("  DNA's Amino Acid sequence:\n\n"
                                + myDNASequence.aminoAcidSqn + "\n\n\n"
                                + "  Reversed DNA sequence:\n\n"
                                + myDNASequence.dnaRvs + "\n\n\n"
                                + "  Reversed Amino Acid sequence:\n\n"
                                + myDNASequence.rvsAminoSqn + "\n\n\n"
                                + "  Complimentary DNA sequence:\n\n"
                                + myDNASequence.compli + "\n\n\n"
                                + "  Complimentary Amino Acid sequence:\n\n"
                                + myDNASequence.compliAminoSqn + "\n\n\n");
      }
    }
    
  }//GEN-LAST:event_jButton1ActionPerformed

  private void RvsDNACBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RvsDNACBActionPerformed
    if (RvsDNACB.isSelected()) {
      RvsAminoCB.setEnabled(rootPaneCheckingEnabled);
    }
    if (!RvsDNACB.isSelected()) {
      RvsAminoCB.setEnabled(false);
      RvsAminoCB.setSelected(false);
    }
  }//GEN-LAST:event_RvsDNACBActionPerformed

  private void ComplimentaryCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComplimentaryCBActionPerformed
    if (ComplimentaryCB.isSelected()) {
      CompliAminoCB.setEnabled(rootPaneCheckingEnabled);
    }
    if (!ComplimentaryCB.isSelected()) {
      CompliAminoCB.setEnabled(false);
      CompliAminoCB.setSelected(false);
    }
  }//GEN-LAST:event_ComplimentaryCBActionPerformed

  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(Guiproject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(Guiproject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(Guiproject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(Guiproject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
        //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        new Guiproject().setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JCheckBox AminoAcidCB;
  private javax.swing.JCheckBox CompliAminoCB;
  private javax.swing.JCheckBox ComplimentaryCB;
  private javax.swing.JTextField DNAEntryField;
  private java.awt.TextArea DisplayTextArea;
  private javax.swing.JCheckBox RvsAminoCB;
  private javax.swing.JCheckBox RvsDNACB;
  private javax.swing.JButton jButton1;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  // End of variables declaration//GEN-END:variables
}
